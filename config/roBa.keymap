#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    // automouse-layer = <4>;

    scroll-layers = <5>;

    arrows {
        layers = <3>;
        bindings =
            <&kp RIGHT_ARROW>,
            <&kp LEFT_ARROW>,
            <&kp UP_ARROW>,
            <&kp DOWN_ARROW>;

        tick = <10>;
        wait-ms = <5>;
        tap-ms = <5>;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp AT>;
            key-positions = <18 19>;
        };

        quote {
            bindings = <&kp AMPERSAND>;
            key-positions = <19 20>;
        };

        underbar {
            bindings = <&kp LS(INTERNATIONAL_1)>;
            key-positions = <20 21>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        underbar: underbar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_SHIFT &kp MINUS &kt LEFT_SHIFT>;
            label = "UNDERBAR";
        };
    };

    behaviors {
        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q          &kp W         &kp E         &kp R                        &kp T                                                                               &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A          &kp S         &kp D         &kp F                        &kp G                   &kp LS(LG(S))                    &lt_to_layer_0 5 F2        &kp H        &kp J  &kp K      &kp L    &kp MINUS
&kp Z          &kp X         &kp C         &kp V                        &kp B                   &mt LEFT_SHIFT SINGLE_QUOTE      &mt RIGHT_SHIFT SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &mt RCTRL SLASH
&mt LCTRL TAB  &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 3 LANGUAGE_2  &lt_to_layer_0 2 SPACE  &lt_to_layer_0 6 LANGUAGE_1      &kp BACKSPACE              &lt 1 ENTER                             &kp DEL
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        NUM {
            bindings = <
&kp MINUS             &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp LS(SEMI)                                              &kp EQUAL          &kp CARET         &kp PLUS         &kp ASTRK   &kp LEFT_PARENTHESIS
&kp N0                &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp DOUBLE_QUOTES  &kp LG(NUMBER_1)      &kp EXCLAMATION  &kp EXCLAMATION    &kp LEFT_BRACKET  &kp HASH         &kp DOLLAR  &kp PERCENT
&mt LEFT_SHIFT SLASH  &kp N1        &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD         &kp UNDERSCORE        &kp LEFT_BRACE   &kp RIGHT_BRACKET  &kp BACKSLASH     &kp RIGHT_BRACE  &kp PIPE    &kp INTERNATIONAL_1
&trans                &trans        &trans        &trans        &trans             &trans                &trans           &trans                                                            &kp PIPE2
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        MOUSE {
            bindings = <
&kp ESCAPE  &kp LC(LG(LEFT_ARROW))  &kp UP_ARROW    &kp LC(LG(RIGHT_ARROW))  &kp F7                              &kp F5           &kp LG(LEFT_ARROW)  &kp LC(T)      &kp LG(RIGHT_ARROW)  &kp LC(W)
&kp HOME    &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END      &trans      &kp LC(V)  &kp LC(LS(TAB))  &mkp MB1            &kp PAGE_UP    &mkp MB2             &kp LC(TAB)
&kp LC(Z)   &kp LC(Y)               &kp LC(C)       &kp LC(V)                &kp F2       &trans      &kp LC(C)  &trans           &mkp MB4            &kp PAGE_DOWN  &mkp MB5             &kp LC(F)
&trans      &trans                  &trans          &trans                   &lt 2 SPACE  &trans      &trans     &trans                                                                   &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        CTRLand... {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(R)                &kp LC(T)                      &trans     &kp LC(U)  &kp LC(I)  &kp LC(O)  &kp LC(LS(P))
&kp LC(A)       &kp LC(S)               &kp DOWN_ARROW  &kp LC(F)                &kp END    &trans      &trans  &trans     &trans     &kp LC(K)  &kp LC(L)  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &sk LEFT_SHIFT  &kp LG(LS(RIGHT_ARROW))  &kp LC(B)  &trans      &trans  &kp LC(N)  &trans     &trans     &trans     &trans
&trans          &trans                  &trans          &trans                   &trans     &trans      &trans  &trans                                      &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        bluetooth {
            bindings = <
&trans  &trans        &trans        &trans        &trans                              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &bt BT_CLR      &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans
&trans  &trans        &trans        &trans        &trans  &trans      &trans          &trans                                                  &trans
            >;
        };

        textselecter {
            bindings = <
&kp LS(LC(LEFT))  &kp LC(LEFT)  &kp LS(UP)    &kp LC(RIGHT)  &kp LS(LC(RIGHT))                                 &trans  &trans  &trans  &trans  &trans
&kp LS(HOME)      &kp LS(LEFT)  &kp LS(DOWN)  &kp LS(RIGHT)  &kp LS(END)        &trans                 &trans  &trans  &trans  &trans  &trans  &trans
&kp LC(Z)         &kp LC(X)     &kp LC(C)     &kp LC(V)      &kp LC(RET)        &kp LC(BACKSPACE)      &trans  &trans  &trans  &trans  &trans  &trans
&trans            &trans        &trans        &trans         &trans             &trans                 &trans  &trans                          &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        textselectror {
            if-layers = <1 2>;
            then-layer = <7>;
        };
    };
};
