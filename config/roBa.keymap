#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    // automouse-layer = <4>;

    scroll-layers = <5>;

    arrows {
        layers = <6>;
        bindings =
            <&kp RIGHT_ARROW>,
            <&kp LEFT_ARROW>,
            <&kp UP_ARROW>,
            <&kp DOWN_ARROW>;

        tick = <10>;
        wait-ms = <5>;
        tap-ms = <5>;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
            timeout-ms = <30>;
            layers = <0>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
            timeout-ms = <30>;
            layers = <0>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp AT>;
            key-positions = <18 19>;
        };

        quote {
            bindings = <&kp AMPERSAND>;
            key-positions = <19 20>;
        };

        underbar {
            bindings = <&kp LS(INTERNATIONAL_1)>;
            key-positions = <20 21>;
        };

        add_new_desktop {
            bindings = <&kp LC(LG(D))>;
            key-positions = <8 9>;
            timeout-ms = <40>;
            layers = <2>;
        };

        ctrl+home {
            bindings = <&kp LC(HOME)>;
            key-positions = <1 2>;
            timeout-ms = <30>;
            layers = <2>;
        };

        ctrl+end {
            bindings = <&kp LC(END)>;
            key-positions = <2 3>;
            timeout-ms = <30>;
            layers = <2>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        hold_tap_and_release: underbar {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kt MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kt MACRO_PLACEHOLDER>;
            label = "UNDERBAR";
        };

        window_layout_1: window_layout_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI &kp LCTRL &kp LEFT_ALT>,
                <&macro_tap>,
                <&kp NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_GUI &kp LCTRL &kp LALT>;

            label = "WINDOW_LAYOUT_1";
        };

        change_up_task: change_up_task {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_wait_time 2000>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "CHANGE_UP_TASK";
        };

        change_down_task: change_down_tasks {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp LS(TAB)>,
                <&macro_wait_time 2000>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "CHANGE_DOWN_TASKS";
        };

        ctrl_click: ctrl_click {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&mkp LCLK>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "CTRL_CLICK";
        };
    };

    behaviors {
        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q          &kp W         &kp E         &kp R                        &kp T                                                                               &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A          &kp S         &kp D         &kp F                        &kp G                   &kp LS(LG(S))                    &lt_to_layer_0 4 F2        &kp H        &kp J  &kp K      &kp L    &kp MINUS
&kp Z          &kp X         &kp C         &kp V                        &kp B                   &mt LEFT_SHIFT SINGLE_QUOTE      &mt RIGHT_SHIFT SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &mt RCTRL SLASH
&mt LCTRL TAB  &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 3 LANGUAGE_2  &lt_to_layer_0 2 SPACE  &lt_to_layer_0 6 LANGUAGE_1      &kp BACKSPACE              &lt 1 ENTER                             &kp DEL
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        NUM+Symbol_RR {
            bindings = <
&kp MINUS             &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp LS(SEMI)                                              &kp EQUAL          &kp CARET         &kp PLUS         &kp ASTRK   &kp LEFT_PARENTHESIS
&kp N0                &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp DOUBLE_QUOTES  &kp LG(NUMBER_1)      &kp EXCLAMATION  &kp EXCLAMATION    &kp LEFT_BRACKET  &kp HASH         &kp DOLLAR  &kp PERCENT
&mt LEFT_SHIFT SLASH  &kp N1        &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD         &kp UNDERSCORE        &kp LEFT_BRACE   &kp RIGHT_BRACKET  &kp BACKSLASH     &kp RIGHT_BRACE  &kp PIPE    &kp INTERNATIONAL_1
&trans                &trans        &trans        &trans        &trans             &trans                &trans           &trans                                                            &kp LS(INT3)
            >;

            sensor-bindings = <&inc_dec_kp LS(LC(DOWN_ARROW)) LS(LC(UP_ARROW))>;
        };

        MOUSE+Arrows_LM {
            bindings = <
&kp ESCAPE  &kp LC(LS(TAB))  &kp UP_ARROW    &kp LC(TAB)      &kp F7                                          &kp F5         &hold_tap_and_release LEFT_GUI LEFT_ARROW  &hold_tap_and_release LEFT_GUI RIGHT_ARROW  &kp LG(LC(LEFT_ARROW))  &kp LC(LG(RIGHT_ARROW))
&kp HOME    &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END      &trans      &kp LS(LC(SEMICOLON))  &kp LC(F)      &mkp MB1                                   &kp LG(TAB)                                 &mkp MB2                &kp F7
&kp LC(Z)   &kp LC(X)        &kp LC(C)       &kp LC(V)        &kp LC(A)    &kp F2      &kp LC(MINUS)          &kp LG(LC(T))  &mkp MB4                                   &kp PAGE_DOWN                               &mkp MB5                &kp LC(LS(T))
&trans      &trans           &trans          &trans           &lt 2 SPACE  &trans      &trans                 &trans                                                                                                                        &trans
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PAGE_UP>;
        };

        phrase_express_LL {
            bindings = <
&kp ESCAPE      &kp LC(LS(LA(W)))       &kp LS(LA(LC(E)))  &kp LC(R)                &kp LC(T)                      &trans         &kp LC(U)  &kp LC(I)       &kp LC(O)  &kp LC(LS(P))
&kp LC(A)       &kp LC(S)               &kp DOWN_ARROW     &kp LC(F)                &kp END    &trans      &trans  &trans         &trans     &kp LC(LG(F4))  &kp LC(L)  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &kp LS(LA(LC(C)))  &kp LG(LS(RIGHT_ARROW))  &kp LC(B)  &trans      &trans  &kp LC(N)      &trans     &trans          &trans     &trans
&trans          &trans                  &trans             &trans                   &trans     &trans      &trans  &kp LG(SLASH)                                        &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        WindowLayout+tabselect_Rinner {
            bindings = <
&window_layout_1  &kp LA(LC(LG(NUMBER_2)))  &kp LA(LC(LG(NUMBER_3)))  &kp LA(LC(LG(NUMBER_4)))  &kp LA(LC(LG(N5)))                          &trans   &trans   &trans  &trans  &trans
&kp F6            &kp LC(N4)                &kp LC(N5)                &kp LC(N6)                &trans              &trans          &trans  &trans   &trans   &trans  &trans  &trans
&kp F1            &kp LC(N1)                &kp LC(N2)                &kp LC(N3)                &trans              &kp INSERT      &trans  &kp F11  &kp F12  &trans  &trans  &trans
&trans            &trans                    &trans                    &trans                    &trans              &trans          &trans  &trans                            &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        bluetooth+taskbar_app_LR {
            bindings = <
&trans  &kp LG(N7)        &kp LG(E)         &trans      &trans                              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &kp LG(N4)        &kp LG(N5)        &kp LG(N6)  &trans  &trans      &bt BT_CLR      &trans        &ctrl_click   &trans        &trans        &trans
&trans  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(N3)  &trans  &trans      &bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans
&trans  &trans            &trans            &trans      &trans  &trans      &trans          &trans                                                  &trans
            >;
        };

        textselecter_LM+RR {
            bindings = <
&kp LS(LC(LEFT))  &kp LC(LEFT)  &kp LS(UP)    &kp LC(RIGHT)  &kp LS(LC(RIGHT))                                 &kp LC(LA(LS(Y)))  &kp LS(LA(LC(U)))  &kp LS(LA(LC(I)))  &kp LS(LA(LC(O)))  &kp LC(W)
&kp LS(HOME)      &kp LS(LEFT)  &kp LS(DOWN)  &kp LS(RIGHT)  &kp LS(END)        &trans                 &trans  &kp LS(LA(LC(H)))  &kp LS(LA(LC(J)))  &kp LS(LA(LC(K)))  &kp LS(LA(LC(L)))  &hold_tap_and_release LEFT_GUI UP_ARROW
&kp LC(Z)         &kp LC(X)     &kp LC(C)     &kp LC(V)      &kp LC(RET)        &kp LC(BACKSPACE)      &trans  &kp LS(LA(LC(N)))  &kp LS(LA(LC(M)))  &trans             &trans             &hold_tap_and_release LEFT_GUI DOWN_ARROW
&trans            &trans        &trans        &trans         &trans             &trans                 &trans  &trans                                                                      &trans
            >;

            sensor-bindings = <&inc_dec_kp LS(LC(DOWN)) LS(LC(UP_ARROW))>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        textselectror {
            if-layers = <1 2>;
            then-layer = <7>;
        };
    };
};
